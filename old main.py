#!/usr/bin/env python
# 
# Pentest Script Version 1.0.0 (2022)
#
# This tool may be used for legal purposes only.  Users take full responsibility
# for any actions performed using this tool. The author accepts no liability for
# damage caused by this tool.  If these terms are not acceptable to you, then do 
# not use this tool.
# 
# by Pierre CHAUSSARD
# 
# 08-Feb-2022 - 1.0.0 - Creating basic script.
# 10-Feb-2022 - 1.0.1 - Adding port scanner function.
# 14-Feb-2022 - 1.0.2 - Updating port scanner function + others functions.


import pyfiglet,sys,requests,socket,glob,os,json
#import scapy.all as scapy               #pip install scapy
import hashlib
import time
from datetime import datetime


def section_print(title):
    print("\n" + "=" * 50)
    print(title)
    print("=" * 50 + "\n")


def subdomain_enum():
    section_print("SUBDOMAIN TO ENUMERATE")
    sub_to_enum = input("Enter hostname enumerate :\n>")
    sub_list = open("wordlists/subdomain.txt").read() 
    subdoms = sub_list.splitlines()

    print("\nValide domains :")

    for sub in subdoms:
        sub_domains = f"http://{sub}.{sub_to_enum}"

        try:
            requests.get(sub_domains)
        
        except requests.ConnectionError: 
            pass          
        else:
            print(" | ", sub_domains)
    print(" |_ Done !")
    input("\nPress Enter to continue...")


def directory_enum():
    section_print("DIRECTORY TO ENUMERATE")
    dir_to_enum = input("Enter hostname/IP to enumarate :\n>")
    print('\n')
    sub_list = open("wordlists/directory-list-low.txt").read()
    directories = sub_list.splitlines()
    target = socket.gethostbyname(dir_to_enum)

    for dir in directories:
        dir_enum = f"http://{target}/{dir}.html" 
        r = requests.get(dir_enum)
        if r.status_code == 404: 
            pass
        else:
            print("Valid directory:" , dir_enum)
    input("\nPress Enter to continue...")


def port_scanner():
    section_print("PORT SCANNER")
    host_to_scan = input("Enter host to scan :\n>")

    print("\n" + "-" * 50)
    print("Scanning Target: " + host_to_scan)
    print("Scanning started at: " + str(datetime.now()))
    print("-" * 50)
    
    with open('wordlists/tcp-port.json') as json_data:
        data_dict = json.load(json_data)

    for port in data_dict:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        socket.setdefaulttimeout(0.0000001)

        state = s.connect_ex((host_to_scan,port['port']))
        if state == 0:
            print(f"{port['port']}/tcp\n |  State : OPEN.\n |  Service : {port['service']}.\n |_ Description : {port['description']}.")
        s.close()

    f = open(f"src/{host_to_scan}.txt", "a")
    #f.write(ascii_banner)
    f.write("-" * 50 + "\n")
    f.write("Scanning Target: " + host_to_scan + "\n")
    f.write("Scanning started at: " + str(datetime.now()) + "\n")
    f.write("-" * 50 + "\n")

    for port in data_dict:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        socket.setdefaulttimeout(0.0000001)

        state = s.connect_ex((host_to_scan,port['port']))
        if state == 0:
            f.write(f"{port['port']}/tcp\n |  State : OPEN.\n |  Service : {port['service']}.\n |_ Description : {port['description']}.\n")
        s.close()
    f.close()
    print("\nFile Saved !")

    input("\nPress Enter to continue...")


def ip_hostname():
    section_print("GET IP FROM HOSTNAME")
    host_to_resolve = input("Enter hostname to resolve :\n>")
    ip = socket.gethostbyname(host_to_resolve)
    print(f"Resolved !\n |  Hostname : {host_to_resolve}.\n |_ IP : {ip}")
    input("\nPress Enter to continue...")


def network_scanner():
    print("Available soon ...")
    input("\nPress Enter to continue...")


def ssh_bruteforce():
    print("Available soon ...")
    input("\nPress Enter to continue...")


def hash_cracker():
    section_print("HASH CRACKER")
    # path = 'wordlists/'
    # files = os.listdir(path)
    # for f in files:
    #     print(f)

    wordlist_location = str(input("Enter wordlist file location [name.ext] :\n>"))
    hash_type = str(input("Enter hash type [md5, sha256] :\n>"))
    hash_input = str(input("Enter hash to be cracked :\n>"))

    with open(f"wordlists\{wordlist_location}", 'r') as file:
        start = time.time()
        for line in file.readlines():
            if hash_type == 'md5':
                hash_ob = hashlib.md5(line.strip().encode())
            elif hash_type == 'sha256':
                hash_ob = hashlib.sha256(line.strip().encode())
            
            hashed_pass = hash_ob.hexdigest()
            if hashed_pass == hash_input:
                end = time.time()
                print(f"Hash Cracker\n |  Wordlist : {wordlist_location}.\n |  Hash Type : {hash_type}.\n |  Hash : {hash_input}.\n |  Password founded : {line.strip()}\n |_ Time elapsed : {end - start}s.")
                exit(0)


def input_choice():
    ascii_banner = pyfiglet.figlet_format("PENTEST.PY")
    print(ascii_banner)

    x = int(input("Choose your service :\n 1. Subdomain Enumeration.\n 2. Directory Enumeration.\n 3. Port Scanner.\n 4. IP from hostname.\n 5. Network Scanner.\n 6. Hash Cracker.\n 7. SSH Brute Force.\n\n>"))

    if x == 1:
        subdomain_enum()
        input_choice()
    elif x == 2:
        directory_enum()
        input_choice()
    elif x == 3:
        port_scanner()
        input_choice()
    elif x == 4:
        ip_hostname()
        input_choice()
    elif x == 5:
        network_scanner()
        input_choice()
    elif x == 6:
        hash_cracker()
        input_choice()
    elif x == 7:
        ssh_bruteforce()
        input_choice()


try:
    input_choice()

except KeyboardInterrupt:
        print("\n/!\ Exiting Program !")
        sys.exit()
except socket.gaierror:
        print("\n/!\ Hostname Could Not Be Resolved !")
        sys.exit()