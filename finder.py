#!/usr/bin/env python
# 
# Pentest Script Version 1.0.0 (2022)
#
# This tool may be used for legal purposes only.  Users take full responsibility
# for any actions performed using this tool. The author accepts no liability for
# damage caused by this tool.  If these terms are not acceptable to you, then do 
# not use this tool.
# 
# by Pierre CHAUSSARD
# 
# 08-Feb-2022 - 1.0.0 - Creating basic script.
# 10-Feb-2022 - 1.0.1 - Adding port scanner function.
# 14-Feb-2022 - 1.0.2 - Updating port scanner function + others functions.
# 21-Mar-2022 - 1.1.0 - Transform code into oop project + adding account finder.
# 22-Mar-2022 - 1.1.1 - Adding ssh bruteforce.
# 23-Mar-2022 - 1.1.2 - Transform finder as class.
#               1.1.3 - Script optimization.
# 

from selenium.webdriver.firefox.options import Options
from selenium.webdriver.common.keys import Keys
from selenium import webdriver
import time


class Finder():
    def __init__(self):
        self.options = Options()
        self.options.binary_location = r'C:\Program Files\Mozilla Firefox\firefox.exe'
        self.browser = webdriver.Firefox(executable_path=r'geckodriver.exe', options=self.options)
        self.services = [self.amazon, self.facebook, self.gmail, self.instagram, self.linkedin, self.steam, self.twitter]

    def amazon(self, email):
        self.browser.get('https://www.amazon.fr/ap/signin?_encoding=UTF8&accountStatusPolicy=P1&openid.assoc_handle=frflex&openid.claimed_id=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&openid.identity=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&openid.mode=checkid_setup&openid.ns=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0&openid.ns.pape=http%3A%2F%2Fspecs.openid.net%2Fextensions%2Fpape%2F1.0&openid.pape.max_auth_age=0&openid.return_to=https%3A%2F%2Fwww.amazon.fr%2Fgp%2Fcss%2Forder-history%3Fie%3DUTF8%26ref_%3Dnav_orders_first&pageId=webcs-yourorder&showRmrMe=1')

        time.sleep(1)

        input_xpath = '/html/body/div[1]/div[1]/div[2]/div/div[2]/div/div[1]/form/div/div/div/div[1]/input[1]'
        input_field = self.browser.find_element_by_xpath(input_xpath)
        input_field.send_keys(email)
        input_field.send_keys(Keys.ENTER)

        time.sleep(1)

        if self.browser.find_elements_by_xpath('/html/body/div[1]/div[1]/div[2]/div/div[1]/div/div/div/h4'):
            # self.browser.close()
            return {'Amazon' : 'False'}
        else:
            # self.browser.close()
            return {'Amazon' : 'True'}
    
    def discord(self, email):
        pass
    
    def facebook(self, email):
        self.browser.get('https://www.instagram.com/?hl=fr')

        time.sleep(1)

        if self.browser.find_elements_by_xpath('/html/body/div[4]/div/div/button[2]'):
            self.browser.find_element_by_xpath('/html/body/div[4]/div/div/button[2]').click()
            time.sleep(1)

        input_xpath = '/html/body/div[1]/section/main/article/div[2]/div[1]/div/form/div/div[1]/div/label/input'
        input_field = self.browser.find_element_by_xpath(input_xpath)
        input_field.send_keys(email)

        pass_xpath = '/html/body/div[1]/section/main/article/div[2]/div[1]/div/form/div/div[2]/div/label/input'
        pass_field = self.browser.find_element_by_xpath(pass_xpath)
        pass_field.send_keys("password")
        pass_field.send_keys(Keys.ENTER)

        time.sleep(1)

        if self.browser.find_elements_by_xpath('/html/body/div[1]/section/main/article/div[2]/div[1]/div/form/div[2]/p'):
            # self.browser.close()
            return {'Instagram' : 'False'}
        else:
            # self.browser.close()
            return {'Instagram' : 'True'}
    
    def gmail(self, email):
        self.browser.get('https://accounts.google.com/signin/v2/identifier?service=mail&flowName=GlifWebSignIn&flowEntry=ServiceLogin')

        time.sleep(1)

        input_xpath = '/html/body/div[1]/div[1]/div[2]/div/div[2]/div/div/div[2]/div/div[1]/div/form/span/section/div/div/div[1]/div/div[1]/div/div[1]/input'
        input_field = self.browser.find_element_by_xpath(input_xpath)
        input_field.send_keys(email)
        input_field.send_keys(Keys.ENTER)

        time.sleep(1)

        if self.browser.find_elements_by_xpath('/html/body/div[1]/div[1]/div[2]/div/div[2]/div/div/div[2]/div/div[1]/div/form/span/section/div/div/div[1]/div/div[2]/div[2]/div'):
            # self.browser.close()
            return {'Gmail' : 'False'}
        else:
            # self.browser.close()
            return {'Gmail' : 'True'}

    def instagram(self, email):
        self.browser.get('https://www.instagram.com/?hl=fr')

        time.sleep(1)

        if self.browser.find_elements_by_xpath('/html/body/div[4]/div/div/button[2]'):
            self.browser.find_element_by_xpath('/html/body/div[4]/div/div/button[2]').click()
            time.sleep(2)

        input_xpath = '/html/body/div[1]/section/main/article/div[2]/div[1]/div/form/div/div[1]/div/label/input'
        input_field = self.browser.find_element_by_xpath(input_xpath)
        input_field.send_keys(email)

        pass_xpath = '/html/body/div[1]/section/main/article/div[2]/div[1]/div/form/div/div[2]/div/label/input'
        pass_field = self.browser.find_element_by_xpath(pass_xpath)
        pass_field.send_keys("password")
        pass_field.send_keys(Keys.ENTER)

        time.sleep(1)

        if self.browser.find_elements_by_xpath('/html/body/div[1]/section/main/article/div[2]/div[1]/div/form/div[2]/p'):
            # self.browser.close()
            return {'Instagram' : 'False'}
        else:
            # self.browser.close()
            return {'Instagram' : 'True'}
    
    def linkedin(self, email):
        self.browser.get('https://www.linkedin.com/login/fr')

        time.sleep(1)

        input_xpath = '//*[@id="username"]'
        input_field = self.browser.find_element_by_xpath(input_xpath)
        input_field.send_keys(email)

        pass_xpath = '//*[@id="password"]'
        pass_field = self.browser.find_element_by_xpath(pass_xpath)
        pass_field.send_keys("password")

        button_xpath = '/html/body/div/main/div[3]/div[1]/form/div[3]/button'
        button = self.browser.find_element_by_xpath(button_xpath)
        button.click()

        time.sleep(1)

        if self.browser.find_elements_by_xpath('//*[@id="error-for-username"]'):
            # self.browser.close()
            return {'LinkedIn' : 'False'}
        else:
            # self.browser.close()
            return {'LinkedIn' : 'True'}
    
    def steam(self, email):
        self.browser.get('https://store.steampowered.com/login/?l=french')

        time.sleep(1)

        input_xpath = '/html/body/div[1]/div[7]/div[5]/div/div/div[1]/div/div/div/div/form/div[1]/input'
        input_field = self.browser.find_element_by_xpath(input_xpath)
        input_field.send_keys(email)

        pass_xpath = '/html/body/div[1]/div[7]/div[5]/div/div/div[1]/div/div/div/div/form/div[2]/input'
        pass_field = self.browser.find_element_by_xpath(pass_xpath)
        pass_field.send_keys("password")
        pass_field.send_keys(Keys.ENTER)

        time.sleep(1)

        if self.browser.find_elements_by_xpath('/html/body/div[1]/section/main/article/div[2]/div[1]/div/form/div[2]/p'):
            # self.browser.close()
            return {'Steam' : 'False'}
        else:
            # self.browser.close()
            return {'Steam' : 'True'}
    
    def twitter(self, email):
        # browser.get('https://twitter.com/i/flow/login')
        time.sleep(1)
        # input_xpath = '/html/body/div/div/div/div[1]/div/div/div/div/div/div/div[2]/div[2]/div/div/div[2]/div[2]/div[1]/div/div[5]/label/div/div[2]/div/input'
        # input_field = browser.find_element_by_xpath(input_xpath)
        # input_field.send_keys(email)

        # button_xpath = '/html/body/div/div/div/div[1]/div/div/div/div/div/div/div[2]/div[2]/div/div/div[2]/div[2]/div[1]/div/div[6]/div'
        # button = browser.find_element_by_xpath(button_xpath)
        # button.click()
        
        # section_class = 'css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0'
        # while True:
        #     if browser.find_elements_by_class_name(section_class):
        #         return "lets go"
    
    def close(self):
        self.browser.close()